// Code generated by MockGen. DO NOT EDIT.
// Source: module/repository/product/product.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	user "github.com/Billy278/challenges_12-13/module/models/user"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// AdmCreateProduct mocks base method.
func (m *MockProductRepo) AdmCreateProduct(ctx context.Context, productIn user.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmCreateProduct", ctx, productIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdmCreateProduct indicates an expected call of AdmCreateProduct.
func (mr *MockProductRepoMockRecorder) AdmCreateProduct(ctx, productIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmCreateProduct", reflect.TypeOf((*MockProductRepo)(nil).AdmCreateProduct), ctx, productIn)
}

// AdmDeleteProduct mocks base method.
func (m *MockProductRepo) AdmDeleteProduct(ctx context.Context, productId uint64, delete_at *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmDeleteProduct", ctx, productId, delete_at)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdmDeleteProduct indicates an expected call of AdmDeleteProduct.
func (mr *MockProductRepoMockRecorder) AdmDeleteProduct(ctx, productId, delete_at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmDeleteProduct", reflect.TypeOf((*MockProductRepo)(nil).AdmDeleteProduct), ctx, productId, delete_at)
}

// AdmFindAllProduct mocks base method.
func (m *MockProductRepo) AdmFindAllProduct(ctx context.Context) ([]user.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmFindAllProduct", ctx)
	ret0, _ := ret[0].([]user.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdmFindAllProduct indicates an expected call of AdmFindAllProduct.
func (mr *MockProductRepoMockRecorder) AdmFindAllProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmFindAllProduct", reflect.TypeOf((*MockProductRepo)(nil).AdmFindAllProduct), ctx)
}

// AdmFindbyIdProduct mocks base method.
func (m *MockProductRepo) AdmFindbyIdProduct(ctx context.Context, productId uint64) (user.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmFindbyIdProduct", ctx, productId)
	ret0, _ := ret[0].(user.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdmFindbyIdProduct indicates an expected call of AdmFindbyIdProduct.
func (mr *MockProductRepoMockRecorder) AdmFindbyIdProduct(ctx, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmFindbyIdProduct", reflect.TypeOf((*MockProductRepo)(nil).AdmFindbyIdProduct), ctx, productId)
}

// AdmUpdateProduct mocks base method.
func (m *MockProductRepo) AdmUpdateProduct(ctx context.Context, productIn user.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmUpdateProduct", ctx, productIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdmUpdateProduct indicates an expected call of AdmUpdateProduct.
func (mr *MockProductRepoMockRecorder) AdmUpdateProduct(ctx, productIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmUpdateProduct", reflect.TypeOf((*MockProductRepo)(nil).AdmUpdateProduct), ctx, productIn)
}

// UsrCreateProduct mocks base method.
func (m *MockProductRepo) UsrCreateProduct(ctx context.Context, productIn user.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsrCreateProduct", ctx, productIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsrCreateProduct indicates an expected call of UsrCreateProduct.
func (mr *MockProductRepoMockRecorder) UsrCreateProduct(ctx, productIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsrCreateProduct", reflect.TypeOf((*MockProductRepo)(nil).UsrCreateProduct), ctx, productIn)
}

// UsrFindAllProduct mocks base method.
func (m *MockProductRepo) UsrFindAllProduct(ctx context.Context, userId int64) ([]user.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsrFindAllProduct", ctx, userId)
	ret0, _ := ret[0].([]user.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsrFindAllProduct indicates an expected call of UsrFindAllProduct.
func (mr *MockProductRepoMockRecorder) UsrFindAllProduct(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsrFindAllProduct", reflect.TypeOf((*MockProductRepo)(nil).UsrFindAllProduct), ctx, userId)
}

// UsrFindByIdProduct mocks base method.
func (m *MockProductRepo) UsrFindByIdProduct(ctx context.Context, productId, userId uint64) (user.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsrFindByIdProduct", ctx, productId, userId)
	ret0, _ := ret[0].(user.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsrFindByIdProduct indicates an expected call of UsrFindByIdProduct.
func (mr *MockProductRepoMockRecorder) UsrFindByIdProduct(ctx, productId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsrFindByIdProduct", reflect.TypeOf((*MockProductRepo)(nil).UsrFindByIdProduct), ctx, productId, userId)
}
